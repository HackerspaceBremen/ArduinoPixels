//generated pixeldata
#ifndef _DataTextBoyWins_h
#define _DataTextBoyWins_h
#include "PixelData.h"
namespace _TextBoyWins_ {
    const uint8_t indices[756] = {
        255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,0
        ,4
        ,4
        ,4
        ,4
        ,0
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,0
        ,0
        ,4
        ,4
        ,4
        ,4
        ,0
        ,0
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,0
        ,4
        ,4
        ,4
        ,4
        ,4
        ,8
        ,0
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,255
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,255
        ,255
        ,0
        ,0
        ,0
        ,0
        ,255
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,255
        ,255
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,12
        ,12
        ,12
        ,12
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,255
        ,0
        ,16
        ,16
        ,16
        ,16
        ,16
        ,0
        ,0
        ,0
        ,16
        ,16
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,255
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,0
        ,12
        ,20
        ,20
        ,20
        ,0
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,16
        ,16
        ,16
        ,0
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,255
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,0
        ,12
        ,12
        ,12
        ,12
        ,0
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,255
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,16
        ,16
        ,16
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,16
        ,16
        ,0
        ,0
        ,0
        ,255
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,16
        ,16
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,16
        ,16
        ,0
        ,0
        ,255
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,0
        ,0
        ,255
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,16
        ,0
        ,0
        ,0
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,0
        ,255
        ,255
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,0
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,0
        ,16
        ,16
        ,16
        ,16
        ,16
        ,0
        ,0
        ,0
        ,16
        ,16
        ,16
        ,16
        ,0
        ,0
        ,0
        ,0
        ,16
        ,16
        ,0
        ,0
        ,255
        ,255
        ,255
        ,0
        ,0
        ,16
        ,16
        ,16
        ,16
        ,16
        ,16
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,0
        ,0
        ,16
        ,16
        ,0
        ,16
        ,16
        ,16
        ,16
        ,16
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,255
        ,255
        ,255
        ,255
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,255
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,255
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,255
        ,255
        ,0
        ,0
        ,0
        ,0
        ,255
        ,255
        ,255
        ,255
        ,255
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,0
        ,255
    };
    const uint8_t color[24] = {
        34
        ,59
        ,169
        ,255
        ,0
        ,4
        ,21
        ,255
        ,0
        ,0
        ,0
        ,255
        ,255
        ,198
        ,135
        ,255
        ,130
        ,168
        ,255
        ,255
        ,255
        ,201
        ,135
        ,255
    };
}
template<int8_t WidthOffset=0, int8_t HeightOffset=0>
struct DataTextBoyWins : public PixelDataImpl<DataTextBoyWins<WidthOffset, HeightOffset> > {
       static constexpr uint8_t width() { return 54; }
       static constexpr uint8_t height() { return 14; }
       static constexpr int8_t widthOffset() { return WidthOffset; }
       static constexpr int8_t heightOffset() { return HeightOffset; }
       static constexpr const uint8_t* indices() { return _TextBoyWins_::indices; }
       static constexpr const uint8_t* color() { return _TextBoyWins_::color; }
       constexpr DataTextBoyWins(){}
};
#endif
